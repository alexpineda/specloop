"use server"

import { db } from "@/db/db"
import { projectsTable } from "@/db/schema/projects-schema"
import { eq } from "drizzle-orm"
import { ActionState } from "@/types"
import { getSizedAiClient } from "@/lib/ai/sized-ai-client"
import { generateText } from "ai"
import { getPreparedPromptAction } from "./db/settings-actions"
/**
 * Interface for the input to generateCodeForStepAction.
 */
interface GenerateCodeForStepInput {
  /**
   * The chat session ID used to retrieve the implementationPlan from DB.
   */
  chatId: string
}

/**
 * The output structure from generateCodeForStepAction.
 */
interface GenerateCodeForStepOutput {
  /**
   * The raw code snippet generated by the LLM.
   */
  codeSnippet: string
}

/**
 * generateCodeForStepAction
 * -------------------------
 * - Checks the user's membership
 * - Fetches chat session to get implementationPlan
 * - Locates the requested step text (or uses stepContent)
 * - Calls an LLM with codegen_xml_prompt.md plus the step text
 * - Returns the generated code snippet
 *
 * @param input GenerateCodeForStepInput
 * @returns ActionState<GenerateCodeForStepOutput>
 */
export async function generateCodeForStepAction(
  input: GenerateCodeForStepInput
): Promise<ActionState<GenerateCodeForStepOutput>> {
  try {
    const [session] = await db
      .select()
      .from(projectsTable)
      .where(eq(projectsTable.id, input.chatId))
      .limit(1)

    if (!session) {
      return {
        isSuccess: false,
        message: `Chat session ${input.chatId} not found.`
      }
    }
    if (!session.implementationPlan) {
      return {
        isSuccess: false,
        message:
          "No final plan found. You must generate an implementation plan first."
      }
    }

    // const steps = extractImplementationSteps(session.implementationPlan)
    // const step = steps[input.stepIndex]
    // if (!step) {
    //   throw new Error(`Step ${input.stepIndex} not found in plan.`)
    // }
    // const stepText = step.details
    // const stepTitle = step.title

    // if (!stepText.trim()) {
    //   throw new Error("No step content found or provided for code generation.")
    // }

    // 4. Call the LLM with codegen_xml_prompt plus stepText
    const [chatClient, model] = await getSizedAiClient("small")

    const codegenPrompt = await getPreparedPromptAction(session.id, "codegen")

    if (!codegenPrompt.isSuccess) {
      return {
        isSuccess: false,
        message: codegenPrompt.message
      }
    }

    const prompt = codegenPrompt.data?.prompt
    if (!prompt) {
      return {
        isSuccess: false,
        message: "No prompt found"
      }
    }

    const response = await generateText({
      model: chatClient(model),
      system: "You are an world expert developer.",
      messages: [
        {
          role: "user",
          content: prompt
        }
      ]
    })

    if (!response) {
      throw new Error("No response from AI")
    }

    // 5. Return the snippet
    return {
      isSuccess: true,
      message: "Code generated successfully",
      data: { codeSnippet: response.text }
    }
  } catch (error) {
    console.error("Error in generateCodeForStepAction:", error)
    return {
      isSuccess: false,
      message:
        (error as Error).message || "Failed to generate code for the given step"
    }
  }
}
